{"dependencies":[{"name":"three","loc":{"line":2,"column":23}},{"name":"./images","loc":{"line":3,"column":19}}],"generated":{"js":"\"use strict\";\n\nvar _three = require(\"three\");\n\nvar THREE = _interopRequireWildcard(_three);\n\nvar _images = require(\"./images\");\n\nvar _images2 = _interopRequireDefault(_images);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nconst loader = new THREE.TextureLoader();\nconst scene = new THREE.Scene();\nconst camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 0.1, 1000);\n\nconst renderer = new THREE.WebGL1Renderer();\nrenderer.setSize(window.innerWidth, window.innerHeight);\ndocument.querySelector(\".three-bg\").appendChild(renderer.domElement);\n\n// responsive \nwindow.addEventListener(\"resize\", () => {\n  camera.aspect = window.innerWidth / window.innerHeight;\n  camera.updateProjectionMatrix();\n  renderer.setSize(window.innerWidth, window.innerHeight);\n});\nconst geometry = new THREE.PlaneGeometry(18, 10, 15, 9);\nconst material = new THREE.MeshBasicMaterial({\n  //color:0xff0000,\n  map: loader.load(_images2.default.bg2)\n});\nconst mesh = new THREE.Mesh(geometry, material);\n\nscene.add(mesh);\ncamera.position.z = 5;\n\nconst count = geometry.attributes.position.count;\nconst clock = new THREE.Clock();\nfunction animate() {\n  const time = clock.getElapsedTime();\n  for (let i = 0; i < count; i++) {\n    const x = geometry.attributes.position.getX(i);\n    const y = geometry.attributes.position.getY(i);\n    // Animations\n    const anim1 = 0.75 * Math.sin(x * 2 + time * 0.7);\n    const anim2 = 0.75 * Math.sin(x + time * 0.7);\n    const anim3 = 0.75 * Math.sin(y * 15 + time * 0.7);\n\n    geometry.attributes.position.setZ(i, anim1 + anim2 + anim3);\n    geometry.computeVertexNormals();\n    geometry.attributes.position.needsUpdate = true;\n  }\n  requestAnimationFrame(animate);\n  //mesh.rotation.x += 0.01;\n  //mesh.rotation.y += 0.01;\n  renderer.render(scene, camera);\n}\n\nanimate();"},"hash":"13a72da14fb71759647210c8f2554dd1"}