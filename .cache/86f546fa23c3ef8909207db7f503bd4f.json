{"dependencies":[{"name":"lodash-es/clamp","loc":{"line":1,"column":18}},{"name":"../utils/","loc":{"line":2,"column":41}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.selectHandler = selectHandler;\n\nvar _clamp = require(\"lodash-es/clamp\");\n\nvar _clamp2 = _interopRequireDefault(_clamp);\n\nvar _utils = require(\"../utils/\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction selectHandler(scrollbar) {\n  var addEvent = (0, _utils.eventScope)(scrollbar);\n  var containerEl = scrollbar.containerEl,\n      contentEl = scrollbar.contentEl;\n  var isSelected = false;\n  var isContextMenuOpened = false; // flag to prevent selection when context menu is opened\n  var animationID;\n  function scroll(_a) {\n    var x = _a.x,\n        y = _a.y;\n    if (!x && !y) return;\n    var offset = scrollbar.offset,\n        limit = scrollbar.limit;\n    // DISALLOW delta transformation\n    scrollbar.setMomentum((0, _clamp2.default)(offset.x + x, 0, limit.x) - offset.x, (0, _clamp2.default)(offset.y + y, 0, limit.y) - offset.y);\n    animationID = requestAnimationFrame(function () {\n      scroll({ x: x, y: y });\n    });\n  }\n  addEvent(window, 'mousemove', function (evt) {\n    if (!isSelected) return;\n    cancelAnimationFrame(animationID);\n    var dir = calcMomentum(scrollbar, evt);\n    scroll(dir);\n  });\n  // prevent scrolling when context menu is opened\n  // NOTE: `contextmenu` event may be fired\n  //          1. BEFORE `selectstart`: when user right-clicks on the text content -> prevent future scrolling,\n  //          2. AFTER `selectstart`: when user right-clicks on the blank area -> cancel current scrolling,\n  //        so we need to both set the flag and cancel current scrolling\n  addEvent(contentEl, 'contextmenu', function () {\n    // set the flag to prevent future scrolling\n    isContextMenuOpened = true;\n    // stop current scrolling\n    cancelAnimationFrame(animationID);\n    isSelected = false;\n  });\n  // reset context menu flag on mouse down\n  // to ensure the scrolling is allowed in the next selection\n  addEvent(contentEl, 'mousedown', function () {\n    isContextMenuOpened = false;\n  });\n  addEvent(contentEl, 'selectstart', function () {\n    if (isContextMenuOpened) {\n      return;\n    }\n    cancelAnimationFrame(animationID);\n    isSelected = true;\n  });\n  addEvent(window, 'mouseup blur', function () {\n    cancelAnimationFrame(animationID);\n    isSelected = false;\n    isContextMenuOpened = false;\n  });\n  // patch for touch devices\n  addEvent(containerEl, 'scroll', function (evt) {\n    evt.preventDefault();\n    containerEl.scrollTop = containerEl.scrollLeft = 0;\n  });\n}\nfunction calcMomentum(scrollbar, evt) {\n  var _a = scrollbar.bounding,\n      top = _a.top,\n      right = _a.right,\n      bottom = _a.bottom,\n      left = _a.left;\n  var _b = (0, _utils.getPosition)(evt),\n      x = _b.x,\n      y = _b.y;\n  var res = {\n    x: 0,\n    y: 0\n  };\n  var padding = 20;\n  if (x === 0 && y === 0) return res;\n  if (x > right - padding) {\n    res.x = x - right + padding;\n  } else if (x < left + padding) {\n    res.x = x - left - padding;\n  }\n  if (y > bottom - padding) {\n    res.y = y - bottom + padding;\n  } else if (y < top + padding) {\n    res.y = y - top - padding;\n  }\n  res.x *= 2;\n  res.y *= 2;\n  return res;\n}\n//# sourceMappingURL=select.js.map"},"hash":"ccd376b8eeba0d8b5f48dd76ca20dc9c"}